<?php

/*
 * (c) Kévin Dunglas <dunglas@gmail.com>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace Dunglas\DoctrineJsonOdm;

use Doctrine\ORM\Decorator\EntityManagerDecorator;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\Query;
use Doctrine\ORM\UnitOfWork;

/**
 * {@inheritdoc}
 *
 * @author Kévin Dunglas <dunglas@gmail.com>
 */
class EntityManager extends EntityManagerDecorator
{
    public function __construct(EntityManagerInterface $wrapped)
    {
        parent::__construct($wrapped);

        // Override the EntityManager of the UnitOfWork
        $reflectionProperty = new \ReflectionProperty(get_class($wrapped), 'unitOfWork');
        $reflectionProperty->setAccessible(true);
        $reflectionProperty->setValue($wrapped, new UnitOfWork($this));
        $reflectionProperty->setAccessible(false);
    }

    public function find($entityName, $id, $lockMode = null, $lockVersion = null)
    {
        return parent::find($entityName, $id, $lockMode, $lockVersion); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function newHydrator($hydrationMode)
    {
        if (Query::HYDRATE_SIMPLEOBJECT === $hydrationMode) {
            return new SimpleObjectHydrator($this);
        }

        if (Query::HYDRATE_OBJECT === $hydrationMode) {
            return new ObjectHydrator($this);
        }

        return $this->wrapped->newHydrator($hydrationMode);
    }
}
